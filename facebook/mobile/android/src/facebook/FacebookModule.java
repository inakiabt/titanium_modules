/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package facebook;

//import java.util.Arrays;

import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
//import org.appcelerator.titanium.TiContext.OnLifecycleEvent;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiUIHelper;
import org.appcelerator.kroll.common.CurrentActivityListener;
import org.appcelerator.kroll.common.Log;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;

import com.facebook.*;
import com.facebook.model.*;
import com.facebook.widget.FacebookDialog;
import com.facebook.internal.Utility;


@Kroll.module(name="Facebook", id="facebook")
public class FacebookModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "TiFacebookModule";
	private static final String logMode = "DEBUG_MODE";
	//private static final String logMode = "RELEASE_MODE";
	
	public static final String EVENT_LOGIN = "login";
	public static final String EVENT_LOGOUT = "logout";
	public static final String PROPERTY_SUCCESS = "success";
	public static final String PROPERTY_CANCELLED = "cancelled";
	public static final String PROPERTY_ERROR = "error";
	public static final String PROPERTY_CODE = "code";
	public static final String PROPERTY_DATA = "data";
	public static final String PROPERTY_UID = "uid";
	public static final String PROPERTY_RESULT = "result";
	public static final String PROPERTY_PATH = "path";
	public static final String PROPERTY_METHOD = "method";	
	
	protected String uid = null;
	private boolean loggedIn = false;
	private String[] permissions = new String[]{};
	private Session session;
	protected int requestCode;

	private void makeMeRequest(final Session session) {
	    // Make an API call to get user data and define a 
	    // new callback to handle the response.
		Log.d(TAG, "makeMeRequest", logMode);
	    Request request = Request.newMeRequest(session, 
	            new Request.GraphUserCallback() {
	        @Override
	        public void onCompleted(GraphUser user, Response response) {
	        	Log.d(TAG, "me response completed", logMode);
	            // If the response is successful
	        	FacebookRequestError err = response.getError();
	        	KrollDict data = new KrollDict();
	            if (session == Session.getActiveSession() && err == null) {
	            	Log.d(TAG, "session is the active session", logMode);
	                if (user != null) {
	                	Log.d(TAG, "user is not null", logMode);
	                    uid = user.getId();
						data.put(PROPERTY_CANCELLED, false);
						data.put(PROPERTY_SUCCESS, true);
						data.put(PROPERTY_UID, uid);
						JSONObject userJson = user.getInnerJSONObject();
						data.put(PROPERTY_DATA, userJson.toString());
						data.put(PROPERTY_CODE, 0);
						Log.d(TAG, "firing login event from module", logMode);
						fireEvent(EVENT_LOGIN, data);	                    
	                }
	            }
	            if (err != null) {
	            	String errorString = "";
	            	switch (err.getCategory()) {
		            	case AUTHENTICATION_RETRY:
		            		// tell the user what happened by getting the message id, and
		            		// retry the operation later
		            		errorString = "session error";
		            		break;
	
		            	case AUTHENTICATION_REOPEN_SESSION:
		            		// close the session and reopen it.
            				errorString = "no alert";
		            		break;
	
		            	case PERMISSION:
		            		// request the publish permission
		            		errorString = "permission error";
		            		break;
	
		            	case SERVER:
		            	case THROTTLING:
		            		// this is usually temporary, don't clear the fields, and
		            		// ask the user to try again
		            		errorString = "retry";
		            		break;
	
		            	case BAD_REQUEST:
		            		// this is likely a coding error, ask the user to file a bug
		            		errorString = "Looks like a bug. Try contacting the developer.";
		            		break;
	
		            	case OTHER:
		            	case CLIENT:
		            	default:
		            		// an unknown issue occurred, this could be a code error, or
		            		// a server side issue, log the issue, and either ask the
		            		// user to retry, or file a bug
		            		errorString = "";
	            		break;
	            	}
	                // Handle errors, will do so later.
	            	Log.e(TAG, "me request callback error");
	            	Log.e(TAG, "error userActionMessageId: " + err.getUserActionMessageId());
	            	Log.e(TAG, "should notify user: " + err.shouldNotifyUser());
	            	Log.e(TAG, "error message: " + err.getErrorMessage());
      				Session session = Session.getActiveSession();
    				if (session != null && !session.isClosed()) {
    					session.closeAndClearTokenInformation();
    				};
	            	data.put(PROPERTY_ERROR, errorString);
	            	fireEvent(EVENT_LOGIN, data);
	            }
	        }
	    });
	    request.executeAsync();
	} 	
	
	public FacebookModule()
	{
		super();
		Utility.loadResourceIds(TiApplication.getInstance());
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(TAG, "inside onAppCreate", logMode);
		// put module init code that needs to run when the application is created
	}
	
	@Kroll.method
	public void initialize()
	{
		Log.d(TAG, "initialize called", logMode);
		session = Session.openActiveSessionFromCache(TiApplication.getInstance());
		boolean notEnoughPermissionsInSession = false;
		if (session != null){
			Log.d(TAG, "cached session found", logMode);
			// We check if the cached session has the initial permissions we need
			// If not, we will close the session
			for (int i=0; i<permissions.length; i++) {
				List<String> cachedPermissionsList = session.getPermissions();
				if (!cachedPermissionsList.contains(permissions[i])){
					Log.d(TAG, "not enough permissions, close the session", logMode);
					notEnoughPermissionsInSession = true;
					break;
				}	
			}
			if (notEnoughPermissionsInSession){
				session.closeAndClearTokenInformation();
				session = null;
				loggedIn = false;
			} else {
				loggedIn = true;
				Log.d(TAG, "session opened from cache, state: " + session.getState(), logMode);
				makeMeRequest(session);
			}
		} else {
			loggedIn = false;
			Log.d(TAG, "no cached session, user will need to login", logMode);
		}
	}	
	
	@Kroll.method
	public void authorize()
	{		
		final TiActivityResultHandler resultHandler = new TiActivityResultHandler()
		{
			@Override
			public void onResult(Activity activity, int requestCode, int resultCode, Intent data)
			{
				Log.d(TAG, "onResult from Facebook login attempt. resultCode: " + resultCode, logMode);
			    Bundle extras = data.getExtras();
			    KrollDict returnedData = new KrollDict();
			        
			    String errorString = extras.getString("error");   
			    boolean success = extras.getBoolean("success");
			    boolean cancelled = extras.getBoolean("cancelled");
			    boolean logout = extras.getBoolean("logout");

			    if (success){
			    	Log.d(TAG, "login success", logMode);
			    	loggedIn = true;
			    	session = Session.getActiveSession();
			    	makeMeRequest(session);
			    } else if (cancelled){
			    	Log.d(TAG, "login cancelled", logMode);
			    	loggedIn = false;
			    	returnedData.put(PROPERTY_CANCELLED, true);
			    	returnedData.put(PROPERTY_SUCCESS, false);
					fireEvent(EVENT_LOGIN, returnedData);		
			    } else if (errorString != null){
			    	Log.e(TAG, "login error: " + errorString);
			    	loggedIn = false;
			    	returnedData.put(PROPERTY_ERROR, errorString);
			    	returnedData.put(PROPERTY_CANCELLED, false);
			    	returnedData.put(PROPERTY_SUCCESS, false);
					fireEvent(EVENT_LOGIN, returnedData);			    	
			    } else if (logout == true) {
			    	Log.d(TAG, "login attempted but we were logged out....", logMode);
					loggedIn = false;
					fireEvent(EVENT_LOGOUT, returnedData);  	
			    } else {
			    	Log.d(TAG, "we got result back but no success, cancel, error, or logout", logMode);
			    }

			}
			@Override
			public void onError(Activity activity, int requestCode, Exception e)
			{
				Log.e(TAG, e.getLocalizedMessage(), e);
			}	
		};
		
		//Important to be done on the current activity since it will display dialog.
		TiUIHelper.waitForCurrentActivity(new CurrentActivityListener() {
			@Override
			public void onCurrentActivityReady(Activity activity)
			{
				TiActivitySupport support = (TiActivitySupport) activity;
				requestCode = support.getUniqueResultCode();

				Intent loginIntent = new Intent(activity, FacebookModuleActivity.class);
				loginIntent.putExtra(FacebookModuleActivity.PERMS, permissions);
				loginIntent.putExtra(FacebookModuleActivity.CODE, requestCode);

				support.launchActivityForResult(loginIntent, requestCode, resultHandler);
			}
		});
	}	
	
	@Kroll.method
	public void logout()
	{
		Session sess = Session.getActiveSession();
		if (sess != null && !session.isClosed()) {
			sess.closeAndClearTokenInformation();
		};
		session = null;
	}	
	
	@Kroll.method
	public void share(@Kroll.argument(optional = true) final HashMap args)
	{
		TiUIHelper.waitForCurrentActivity(new CurrentActivityListener() {
			@Override
			public void onCurrentActivityReady(Activity activity)
			{
				FacebookDialog shareDialog = null;
				if (args == null || args.isEmpty()) {
					shareDialog = new FacebookDialog.ShareDialogBuilder(activity).build();
				} else {
					String url = (String) args.get("url");
					String namespaceObject = (String) args.get("namespaceObject");
					String namespaceAction = (String) args.get("namespaceAction");
					String objectName = (String) args.get("objectName");
					String imageUrl = (String) args.get("imageUrl");
					String title = (String) args.get("title");
					String description = (String) args.get("description");
					String placeId = (String) args.get("placeId");
					if (url != null && namespaceObject == null) {
						shareDialog = new FacebookDialog.ShareDialogBuilder(activity)
				        .setLink(url)
				        .build();
					} else {
						OpenGraphObject ogObject = OpenGraphObject.Factory.createForPost(namespaceObject);
						ogObject.setProperty("title", title);
						ogObject.setProperty("image", imageUrl);
						ogObject.setProperty("url", url);
						ogObject.setProperty("description", description);

						OpenGraphAction action = OpenGraphAction.Factory.createForPost(namespaceAction);
						action.setProperty(objectName, ogObject);
/*						
						// https://developers.facebook.com/bugs/363119770486799
						if (placeId != null){
							GraphPlace place = GraphObject.Factory.create(GraphPlace.class);
							place.setId(placeId);
							action.setPlace(place);
						}
*/
						shareDialog = new FacebookDialog.OpenGraphActionDialogBuilder(activity, action, objectName)
						        .build();
					}
					
				}
				if (shareDialog != null){
					shareDialog.present();
				}
			}
		});		

	}	
	
	// Properties
	@Kroll.getProperty
	public String getAccessToken()
	{
		Log.d(TAG, "get accessToken", logMode);
		return Session.getActiveSession().getAccessToken();
	}
	
	@Kroll.getProperty @Kroll.method
	public Date getExpirationDate()
	{
		return Session.getActiveSession().getExpirationDate();
	}	

	@Kroll.getProperty @Kroll.method
	public String getUid()
	{
		return uid;
	}

	@Kroll.getProperty @Kroll.method
	public String[] getPermissions()
	{
		Session activeSession = Session.getActiveSession();
		if (activeSession != null){
			List<String> permissionsList = activeSession.getPermissions();
			String[] permissionsArray = permissionsList.toArray(new String[permissionsList.size()]);
			return permissionsArray;			
		}
		return null;	
	}
	
	@Kroll.getProperty @Kroll.method
	public boolean getLoggedIn()
	{
		return this.loggedIn;
	}	
	
	@Kroll.getProperty @Kroll.method
	public boolean canPresentShareDialog()
	{
		return FacebookDialog.canPresentShareDialog(TiApplication.getInstance(), 
				FacebookDialog.ShareDialogFeature.SHARE_DIALOG);
	}	
	
	@Kroll.getProperty @Kroll.method
	public boolean canPresentOpenGraphActionDialog()
	{
		return FacebookDialog.canPresentOpenGraphActionDialog(TiApplication.getInstance(), 
				FacebookDialog.OpenGraphActionDialogFeature.OG_ACTION_DIALOG);
	}	

	@Kroll.setProperty @Kroll.method
	public void setPermissions(Object[] permissions)
	{

		this.permissions = Arrays.copyOf(permissions, permissions.length, String[].class);
	}	
	
	@Override
	public void onResume(Activity activity) 
	{		
		// This method is called when the root context is being resumed
		
		Log.d(TAG, "[MODULE LIFECYCLE EVENT] resume", logMode);	
		
		super.onResume(activity);
	}	
	
	@Override
	public void onPause(Activity activity) 
	{
		// This method is called when the root context is being suspended
		
		Log.d(TAG, "[MODULE LIFECYCLE EVENT] pause", logMode);
		
		super.onPause(activity);
	}	
	
	@Override
	public void onDestroy(Activity activity) 
	{
		// This method is called when the root context is being destroyed
		
		Log.d(TAG, "[MODULE LIFECYCLE EVENT] destroy", logMode);
		
		super.onDestroy(activity);
	}	
}

