/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package facebook;

import java.util.Arrays;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;

import com.facebook.*;

public class FacebookModuleActivity extends Activity
{
	// Standard Debugging variables
	private static final String TAG = "TiFacebookModuleActivity";
	private static final String logMode = "DEBUG_MODE";
	//private static final String logMode = "RELEASE_MODE";	
	public static final String PERMS = "PERMS";
	public static final String CODE = "CODE";

	/* The purpose of this class is to act as an Activity proxy that can receive the onResult response
	 * from Facebook login. Once we get the resultCode from Facebook we can easily send that on
	 * to the calling module.
	 */
	
	private UiLifecycleHelper uiHelper;

	private Intent savedIntent;
	private int savedResultCode;
	private boolean responseSent;

	private void onSessionStateChange(Session session, SessionState state, Exception exception) {
		// We consider Opened, Closed, Cancelled and Error "final" states and finish off
		// All other states are "intermediate"
		Intent returnedIntent;
		if (savedIntent != null){
			returnedIntent = savedIntent;
		} else {
			Log.d(TAG, "savedIntent == null", logMode);
			returnedIntent = new Intent();
		}
		if (exception instanceof FacebookOperationCanceledException) {
			Log.d(TAG, "StatusCallback cancelled", logMode);			
			returnedIntent.putExtra("cancelled", true);
			returnedIntent.putExtra("success", false);
			returnedIntent.putExtra("logout", false);
			setResult(RESULT_OK, returnedIntent);
			responseSent = true;
		    finish();
				
		} else if (exception instanceof FacebookAuthorizationException) {
			// login error
			Log.e(TAG, "StatusCallback error: " + exception.getMessage());
			returnedIntent.putExtra("error", exception.getMessage());
			returnedIntent.putExtra("success", false);
			returnedIntent.putExtra("cancelled", false);
			returnedIntent.putExtra("logout", false);
		    setResult(savedResultCode, returnedIntent);
		    responseSent = true;
	        finish();				
		}
		else if (state.isOpened()) {
			// fire login
			Log.d(TAG, "StatusCallback opened", logMode);
			returnedIntent.putExtra("success", true);
			returnedIntent.putExtra("cancelled", false);
			returnedIntent.putExtra("logout", false);
		    setResult(savedResultCode, returnedIntent);
		    responseSent = true;
	        finish();			
		} else if (state.isClosed()) {
			//fire logout
			Log.d(TAG, "StatusCallback closed", logMode);
			returnedIntent.putExtra("success", false);
			returnedIntent.putExtra("cancelled", false);
			returnedIntent.putExtra("logout", true);
		    setResult(savedResultCode, returnedIntent);
		    responseSent = true;
	        finish();	
		} else {
			// log state
			Log.d(TAG, "StatusCallback other state: " + state, logMode);
		}
	}	

	private Session.StatusCallback callback = 
	    new Session.StatusCallback() {
	    @Override
	    public void call(Session session, 
	            SessionState state, Exception exception) {
	        onSessionStateChange(session, state, exception);
	    }
	};
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        uiHelper = new UiLifecycleHelper(this, callback);
        uiHelper.onCreate(savedInstanceState);
        
        Intent i = getIntent();
        Bundle extras = i.getExtras();
        savedIntent = null;
        responseSent = false;
        
        String [] permissions = extras.getStringArray(PERMS);       
        
        Session session = new Session(TiApplication.getInstance());
        Session.setActiveSession(session);
        session.openForRead(new Session.OpenRequest(this).setPermissions(Arrays.asList(permissions)));    
    }
 
    @Override
    public void onResume() {
    	Log.d(TAG, "onResume", logMode);
        super.onResume();
        uiHelper.onResume();
    }

    @Override
    public void onPause() {
    	Log.d(TAG, "onPause", logMode);	
        super.onPause();
        uiHelper.onPause();
    }

    @Override
    public void onDestroy() {
    	Log.d(TAG, "onDestroy", logMode);	
        super.onDestroy();
        uiHelper.onDestroy();
        if (!responseSent){
        	// Then we will forward a cancellation
    		Intent returnedIntent;
    		if (savedIntent != null){
    			returnedIntent = savedIntent;
    		} else {
    			Log.d(TAG, "savedIntent == null", logMode);
    			returnedIntent = new Intent();
    		}    
			returnedIntent.putExtra("cancelled", true);
			returnedIntent.putExtra("success", false);
			returnedIntent.putExtra("logout", false);
			setResult(RESULT_OK, returnedIntent);
			responseSent = true;
        }
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
    	Log.d(TAG, "onSaveInstanceState", logMode);	
        super.onSaveInstanceState(outState);
        uiHelper.onSaveInstanceState(outState);
    }    
    
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        uiHelper.onActivityResult(requestCode, resultCode, data);
        Log.d(TAG, "onActivityResult Called, resultCode: " + resultCode, logMode);
        
        savedIntent = data;
        savedResultCode = resultCode;
    }
}
